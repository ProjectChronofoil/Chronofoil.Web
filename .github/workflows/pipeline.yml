name: pipeline
on:
  push:
    branches:
      - "main"
      - "staging"

permissions:
  packages: write

jobs:
  compile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x.x'
      - name: Restore
        run: dotnet restore
      - name: Compile
        run: dotnet build --no-restore --configuration Release

  identify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set deployment environment
        id: identify_env
        run: |
          if [[ "${{ github.ref_name }}" == "main" && "${{ github.ref_type }}" == "branch" ]]; then
            echo "environment=Production" >> $GITHUB_OUTPUT
            echo "image_tag=latest" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "staging" && "${{ github.ref_type }}" == "branch" ]]; then
            echo "environment=Staging" >> $GITHUB_OUTPUT
            echo "image_tag=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=None" >> $GITHUB_OUTPUT
            echo "image_tag=None" >> $GITHUB_OUTPUT
          fi
    outputs:
      environment: ${{ steps.identify_env.outputs.environment }}
      image_tag: ${{ steps.identify_env.outputs.image_tag }}
  
  build-push:
    runs-on: ubuntu-latest
    needs:
      - compile
      - identify
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          file: ./src/Dockerfile
          context: .
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ghcr.io/ProjectChronofoil/chronofoil:${{ needs.identify.outputs.image_tag }}
            ghcr.io/ProjectChronofoil/chronofoil:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs:
      - compile
      - identify
      - build-push
    environment: ${{ needs.identify.outputs.environment }}
    concurrency: deploy-${{ needs.identify.outputs.environment }}
    steps:
      - name: Set Deployment Environment
        id: deployment_env
        run: |
          if [[ "${{ needs.identify.outputs.environment }}" == "None" ]]; then
            exit 1
          else
            echo "environment=${{ needs.identify.outputs.environment }}" >> $GITHUB_ENV
          fi
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Connect to Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
          args: --ssh
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          cat <<EOF >> ~/.ssh/config
          Host ${{ vars.ENV_HOSTNAME }}
              User ${{ vars.ENV_USER }}
              Hostname ${{ vars.ENV_HOSTNAME }}
              StrictHostKeyChecking no
              UserKnownHostsFile=/dev/null
          EOF
          chmod 600 ~/.ssh/config
      - name: Hydrate env file
        run: |
          source $environment.env
          echo "POSTGRES_PASSWORD=${{ secrets.DB_PASS }}" >> $environment.env
          echo "CF_CONNSTRING=Host=db:5432;Database=chronofoil;Username=cf;Password=${{ secrets.DB_PASS }}" >> $environment.env
          echo "Serilog__WriteTo__1__Args__apiKey=${{ secrets.SEQ_API_KEY }}" >> $environment.env
          echo "JWT_SecretKey=${{ secrets.JWT_SECRET }}" >> $environment.env
          echo "Discord_ClientId=${{ secrets.DISCORD_CLIENT_ID }}" >> $environment.env
          echo "Discord_ClientSecret=${{ secrets.DISCORD_CLIENT_SECRET }}" >> $environment.env
      - name: Deploy with Docker Stack
        run: |
          docker context create remote --docker "host=ssh://${{ vars.ENV_USER }}@${{ vars.ENV_HOSTNAME }}"
          docker context use remote
          docker stack deploy -c docker-stack.$environment.yml cf-$environment
